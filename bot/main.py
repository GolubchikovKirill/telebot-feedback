import os
from collections import defaultdict
from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    CallbackQuery
)
from db.database import db
from db.models import Feedback, Students
from dotenv import load_dotenv
from abc import ABC, abstractmethod

load_dotenv()
TOKEN = os.getenv("TOKEN")


class BotHandler(ABC):
    @abstractmethod
    def handle(self, message: Message | CallbackQuery):
        pass


class StartHandler(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, message: Message):
        image_url = "https://disk.yandex.ru/i/7MNk0dTd9YzMUQ"
        self.bot.send_photo(
            message.chat.id,
            image_url,
            caption="<b>–£–≤–∞–∂–∞–µ–º—ã–π —Å—Ç—É–¥–µ–Ω—Ç! –Ø <s>–±–æ—Ç</s> –∫–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.</b>\n"
                    "<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏/–∏–ª–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å, "
                    "–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
            parse_mode="HTML",
            reply_markup=FeedbackBot.markup_main()
        )


class FeedbackHandler(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, message: Message):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="liked"))
        keyboard.add(InlineKeyboardButton("–ß—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data="add"))
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", reply_markup=keyboard)


class HelpHandler(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, message: Message):
        self.bot.send_message(
            message.chat.id,
            "<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –Ω—É–∂–Ω–æ:</b>\n"
            "1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'\n"
            "2. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n"
            "3. –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ\n"
            "<b>–ö–Ω–æ–ø–∫–∞ '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã' —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏.</b>",
            parse_mode="HTML"
        )


class ResourcesHandler(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, message: Message):
        image_url = "https://disk.yandex.ru/i/gqOpER4MIq1pwA"
        caption = """
        <b>üìö –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞ –†–ì–ü–£ –∏–º. –ê. –ò. –ì–µ—Ä—Ü–µ–Ω–∞</b>
        –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        üëâ <a href="https://inpsy.hspu.org/">–°–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±—ã</a>

        <b>üñºÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä –ø–æ –†—É—Å—Å–∫–æ–º—É –º—É–∑–µ—é</b>
        üëâ <a href="https://virtual.rusmuseumvrm.ru">–ü–æ—Å–µ—Ç–∏—Ç—å –º—É–∑–µ–π</a>

        <b>üí™ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–± "PROFIT"</b>
        üëâ <a href="https://vk.com/studprofit">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–ª—É–±</a>

        <b>üéÆ –ì–µ—Ä—Ü–µ–Ω–æ–≤—Å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –∫–ª—É–±</b>
        üëâ <a href="https://vk.com/herzengame">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</a>

        <b>üåç –ê—Ç–ª–∞—Å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π</b>
        üëâ <a href="https://www.herzen.spb.ru/about/struct-uni/contr/dep-edu-pract-youth-projects/atlas-studencheskikh-obedineniy/">–°–º–æ—Ç—Ä–µ—Ç—å –∞—Ç–ª–∞—Å</a>
        """
        self.bot.send_photo(message.chat.id, image_url, caption=caption, parse_mode="HTML")


class FeedbackCallbackHandler(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.states = defaultdict(dict)

    def handle(self, call: CallbackQuery):
        if call.data in ("liked", "add"):
            self.bot.answer_callback_query(call.id)
            self.states[call.message.chat.id] = {"state": "waiting_feedback", "type": call.data}
            self.bot.send_message(
                call.message.chat.id,
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")
                )
            )

        elif call.data == "cancel_feedback":
            self.bot.answer_callback_query(call.id)
            if call.message.chat.id in self.states:
                del self.states[call.message.chat.id]
            self.bot.send_message(
                call.message.chat.id,
                "–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                reply_markup=FeedbackBot.markup_main()
            )


class BotGame(BotHandler):
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.selected_parts = defaultdict(lambda: defaultdict(int))  # Default value is 0 (int)
        if not os.path.exists("carts"):
            os.makedirs("carts")

    def handle(self, message: Message):
        self.send_image(message.chat.id, 1)

    def send_image(self, chat_id: int, image_number: int):
        try:
            with open(f"carts/{image_number}.png", "rb") as cart:
                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    InlineKeyboardButton("–ß–∞—Å—Ç—å 1", callback_data=f"part_{image_number}_1"),
                    InlineKeyboardButton("–ß–∞—Å—Ç—å 2", callback_data=f"part_{image_number}_2"),
                    InlineKeyboardButton("–ß–∞—Å—Ç—å 3", callback_data=f"part_{image_number}_3"),
                )
                self.bot.send_photo(chat_id, cart, reply_markup=keyboard)
        except FileNotFoundError:
            self.bot.send_message(chat_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


class GameCallbackHandler(BotHandler):
    def __init__(self, bot: TeleBot, game_handler: BotGame):
        self.bot = bot
        self.game_handler = game_handler
        self.selected_parts = defaultdict(lambda: defaultdict(int))
        self.part_texts = {
            1: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 1", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 1", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 1"},
            2: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 2", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 2", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 2"},
            3: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 3", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 3", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 3"},
            4: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 4", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 4", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 4"},
            5: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 5", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 5", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 5"},
            6: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 6", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 6", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 6"},
            7: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 7", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 7", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 7"},
            8: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 8", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 8", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 8"},
            9: {1: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 9", 2: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 9", 3: "–¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ 9"},
        }

        self.button_names = {
            1: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            2: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            3: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            4: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            5: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            6: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            7: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            8: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
            9: ["–ß–∞—Å—Ç—å 1", "–ß–∞—Å—Ç—å 2", "–ß–∞—Å—Ç—å 3"],
        }

    def handle(self, call: CallbackQuery):
        data = call.data.split("_")
        action = data[0]
        chat_id = call.message.chat.id

        if action == "part":
            image_number = int(data[1])
            part_number = int(data[2])

            if self.selected_parts[chat_id][image_number] != 0:
                self.bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏!")
                return

            self.selected_parts[chat_id][image_number] = part_number
            self.bot.send_message(chat_id, self.part_texts[image_number][part_number])
            self.send_next_button(chat_id, image_number)

        elif action == "next":
            image_number = int(data[1])

            if image_number < 9:
                self.game_handler.send_image(chat_id, image_number + 1)
            else:
                self.bot.send_message(chat_id, "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É!")
                self.selected_parts[chat_id].clear()
                self.bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=FeedbackBot.markup_main())

        self.bot.answer_callback_query(call.id)

    def send_next_button(self, chat_id: int, image_number: int):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–î–∞–ª—å—à–µ ‚Üí", callback_data=f"next_{image_number}"))
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å:", reply_markup=keyboard)


class FeedbackBot:
    def __init__(self, token: str):
        self.bot = TeleBot(token)
        self.game_handler = BotGame(self.bot)
        self.handlers = {
            "start": StartHandler(self.bot),
            "feedback": FeedbackHandler(self.bot),
            "help": HelpHandler(self.bot),
            "resources": ResourcesHandler(self.bot),
            "feedback_callback": FeedbackCallbackHandler(self.bot),
            "game": self.game_handler,
            "game_callback": GameCallbackHandler(self.bot, self.game_handler),
        }
        self.register_handlers()

    def register_handlers(self):
        # –ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.message_handler(commands=['start'])(lambda msg: self.handlers["start"].handle(msg))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")(
            lambda msg: self.handlers["feedback"].handle(msg))
        self.bot.message_handler(func=lambda m: m.text == "–ü–æ–º–æ—â—å")(
            lambda msg: self.handlers["help"].handle(msg))
        self.bot.message_handler(func=lambda m: m.text == "–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã")(
            lambda msg: self.handlers["resources"].handle(msg))
        self.bot.message_handler(func=lambda m: m.text == "–ò–≥—Ä–∞")(
            lambda msg: self.handlers["game"].handle(msg))

        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.callback_query_handler(func=lambda c: c.data in ("liked", "add", "cancel_feedback"))(
            lambda call: self.handlers["feedback_callback"].handle(call))

        self.bot.callback_query_handler(func=lambda c: c.data.startswith(("part", "next")))(
            lambda call: self.handlers["game_callback"].handle(call))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.bot.message_handler(func=lambda m: self.handlers["feedback_callback"].states.get(m.chat.id, {}).get(
            "state") == "waiting_feedback")(
            self.handle_feedback_text)

    def handle_feedback_text(self, message: Message):
        state = self.handlers["feedback_callback"].states.get(message.chat.id)
        if not state:
            return

        feedback_type = state["type"]
        self.save_feedback(message, feedback_type)
        del self.handlers["feedback_callback"].states[message.chat.id]
        self.bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
            reply_markup=self.markup_main()
        )

    @staticmethod
    def save_feedback(message: Message, category: str):
        with db.create_session() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            try:
                student = session.get(Students, message.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.get()
                if not student:
                    student = Students(
                        id=message.from_user.id,
                        name=message.from_user.full_name
                    )
                    session.add(student)

                feedback = Feedback(
                    message=message.text,
                    category=category
                )
                session.add(feedback)
                session.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                session.rollback()

    @staticmethod
    def markup_main() -> ReplyKeyboardMarkup:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
            "–ò–≥—Ä–∞",
            "–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
            "–ü–æ–º–æ—â—å"
        )
        return markup

    def run(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.bot.infinity_polling()


if __name__ == "__main__":
    bot = FeedbackBot(TOKEN)
    bot.run()